<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2020-2022 Google LLC

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.openmrs.analytics</groupId>
  <artifactId>pipelines</artifactId>
  <version>0.1.0-SNAPSHOT</version>
  <packaging>pom</packaging>

  <name>FHIR Analytics</name>
  <description>Implementation of pipelines for OpenMRS to FHIR transformation</description>
  <inceptionYear>2020</inceptionYear>

  <modules>
    <module>batch</module>
    <module>streaming</module>
    <module>common</module>
    <module>controller</module>
  </modules>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <junit.version>4.13.2</junit.version>
    <!-- We use an older version of logback because that is needed for
      spring-boot-starter-logging; it uses org.slf4j.impl.StaticLoggerBinder
      which was removed in 1.3 https://stackoverflow.com/questions/67082351
      For the same reason, we use an older version of SLF4J too. -->
    <slf4j.version>1.7.36</slf4j.version>
    <logback.version>1.2.11</logback.version>
    <hapifhirVersion>6.1.3</hapifhirVersion>
    <hamcrest.version>2.2</hamcrest.version>
    <openmrsPlatformVersion>2.6.0-SNAPSHOT</openmrsPlatformVersion>
    <mockito.version>4.8.1</mockito.version>
    <jcommander.version>1.78</jcommander.version>
    <license-maven-plugin.version>4.1</license-maven-plugin.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>ca.uhn.hapi.fhir</groupId>
        <artifactId>hapi-fhir-base</artifactId>
        <version>${hapifhirVersion}</version>
      </dependency>

      <dependency>
        <groupId>ca.uhn.hapi.fhir</groupId>
        <artifactId>hapi-fhir-structures-dstu3</artifactId>
        <version>${hapifhirVersion}</version>
      </dependency>

      <dependency>
        <groupId>ca.uhn.hapi.fhir</groupId>
        <artifactId>hapi-fhir-structures-r4</artifactId>
        <version>${hapifhirVersion}</version>
      </dependency>

      <dependency>
        <groupId>ca.uhn.hapi.fhir</groupId>
        <artifactId>hapi-fhir-client</artifactId>
        <version>${hapifhirVersion}</version>
      </dependency>

      <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-inline</artifactId>
        <version>${mockito.version}</version>
        <scope>test</scope>
      </dependency>

      <dependency>
        <groupId>com.beust</groupId>
        <artifactId>jcommander</artifactId>
        <version>${jcommander.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- Add slf4j API frontend binding with JUL backend -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
    </dependency>

    <!-- Use logback as the logging framework. -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>${logback.version}</version>
      <scope>runtime</scope>
    </dependency>

    <!-- Test deps -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- remember to install Lombok IDE plugin: by first ticking the "Enable annotation processing"
      checkbox in Settings->Compiler->Annotation Processors. Secondly, Install the plugin
       of Lombok for idea and restart IDE for change to take effect.
    -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.24</version>
    </dependency>

    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
      <version>${hamcrest.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-library</artifactId>
      <version>${hamcrest.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-inline</artifactId>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement>
      <!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.3.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.2</version>
        </plugin>
        <!--
           Configures `mvn package` to produce a bundled jar ("fat jar") for runners
           that require this for job submission to a cluster.
         -->
        <plugin>
          <artifactId>maven-shade-plugin</artifactId>
          <version>3.4.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
        <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.7.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>3.4.1</version>
        </plugin>
        <!-- Code formatter -->
        <plugin>
          <groupId>com.diffplug.spotless</groupId>
          <artifactId>spotless-maven-plugin</artifactId>
          <version>2.27.2</version>
          <configuration>
            <pom>
              <sortPom>
                <expandEmptyElements>false</expandEmptyElements>
              </sortPom>
              <trimTrailingWhitespace/>
              <endWithNewline/>
              <indent>
                <spaces>true</spaces>
              </indent>
            </pom>
            <formats>
              <!-- you can define as many formats as you want, each is independent -->
              <format>
                <!-- define the files to apply to -->
                <includes>
                  <include>**/*.sh</include>
                  <include>**/*.xml</include>
                  <include>.gitignore</include>
                </includes>
                <!-- ignore build files -->
                <excludes>
                  <exclude>.idea/**</exclude>
                  <exclude>.settings/**</exclude>
                  <exclude>**/target/**</exclude>
                  <exclude>bin/**</exclude>
                  <exclude>tmp/**</exclude>
                </excludes>
                <trimTrailingWhitespace/>
                <endWithNewline/>
                <indent>
                  <spaces>true</spaces>
                </indent>
              </format>
              <format>
                <includes>
                  <include>**/*.md</include>
                </includes>
                <excludes>
                  <exclude>**/target/**</exclude>
                </excludes>
                <prettier>
                  <!-- Formatter that Spotless supports and can format Markdown:
                       https://github.com/diffplug/spotless/tree/main/plugin-maven#prettier
                     Only Spotless-supported formatter that can be configured to
                     force line wrap -->
                  <config>
                    <proseWrap>always</proseWrap>
                  </config>
                </prettier>
              </format>
            </formats>
            <!-- define a language-specific format -->
            <java>
              <importOrder/>
              <!-- standard import order -->

              <removeUnusedImports/>

              <!-- apply a specific flavor of google-java-format and reflow long strings -->
              <googleJavaFormat>
                <version>1.11.0</version>
                <style>GOOGLE</style>
                <reflowLongStrings>true</reflowLongStrings>
              </googleJavaFormat>
            </java>
          </configuration>
          <executions>
            <execution>
              <goals>
                <goal>apply</goal>
              </goals>
              <phase>compile</phase>
            </execution>
          </executions>
        </plugin>
        <!-- this is for finding files at the root ${main.basedir} easier -->
        <plugin>
          <groupId>org.commonjava.maven.plugins</groupId>
          <artifactId>directory-maven-plugin</artifactId>
          <version>1.0</version>
          <executions>
            <execution>
              <id>directories</id>
              <goals>
                <goal>highest-basedir</goal>
              </goals>
              <phase>validate</phase>
              <configuration>
                <property>main.basedir</property>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <!-- license header -->
        <plugin>
          <groupId>com.mycila</groupId>
          <artifactId>license-maven-plugin</artifactId>
          <version>${license-maven-plugin.version}</version>
          <configuration>
            <header>${main.basedir}${file.separator}license-header.txt</header>
            <includes>
              <include>**/*.java</include>
              <include>**/*.xml</include>
              <include>**/*.properties</include>
            </includes>
            <excludes>
              <exclude>license-format.xml</exclude>
              <exclude>**/target/**</exclude>
              <exclude>.git/**</exclude>
              <exclude>.idea/**</exclude>
              <exclude>.settings/**</exclude>
              <exclude>.externalToolBuilders/</exclude>
              <exclude>nbproject/private/</exclude>
              <exclude>.vscode/**</exclude>
            </excludes>
          </configuration>
          <dependencies>
            <dependency>
              <groupId>com.mycila</groupId>
              <artifactId>license-maven-plugin-git</artifactId>
              <version>${license-maven-plugin.version}</version>
            </dependency>
          </dependencies>
          <executions>
            <execution>
              <id>add-license</id>
              <goals>
                <goal>format</goal>
              </goals>
              <phase>process-sources</phase>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>exec-maven-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <plugin>
          <!-- This is added for Codecov. -->
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>0.8.8</version>
          <executions>
            <execution>
              <goals>
                <goal>prepare-agent</goal>
              </goals>
            </execution>
            <execution>
              <id>report</id>
              <goals>
                <goal>report</goal>
              </goals>
              <phase>test</phase>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>

    <!-- plugins that we want to run for all modules -->
    <plugins>
      <plugin>
        <groupId>org.commonjava.maven.plugins</groupId>
        <artifactId>directory-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>com.mycila</groupId>
        <artifactId>license-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <release>11</release>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>

</project>
