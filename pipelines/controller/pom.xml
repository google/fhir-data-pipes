<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2020-2024 Google LLC

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.google.fhir.analytics</groupId>
    <artifactId>pipelines</artifactId>
    <version>0.2.7-SNAPSHOT</version>
  </parent>

  <artifactId>controller</artifactId>
  <name>controller</name>
  <description>A Spring Boot based controller for FHIR Analytics pipelines</description>

  <properties>
    <java.version>17</java.version>
    <spring-boot.version>3.4.3</spring-boot.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <!-- Instead of using spring-boot-starter-parent as POM parent we add
      pieces needed from it; also see:
      https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/#using.import
      -->
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring-boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
      <exclusions>
        <!-- TODO decide whether to exclude log4j as we use logback -->
        <!--exclusion>
          <groupId>org.apache.logging.log4j</groupId>
          <artifactId>log4j-to-slf4j</artifactId>
        </exclusion>-->
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>jul-to-slf4j</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>io.micrometer</groupId>
      <artifactId>micrometer-registry-prometheus</artifactId>
    </dependency>

    <!-- This is to make it easier to hot-swap static content, i.e., to make
     testing static content changes in a running server easier. -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <optional>true</optional>
    </dependency>

    <!-- Pipeline dependencies for execution and monitoring -->
    <dependency>
      <groupId>${project.parent.groupId}</groupId>
      <artifactId>batch</artifactId>
      <version>${project.parent.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.parent.groupId}</groupId>
      <artifactId>common</artifactId>
      <version>${project.parent.version}</version>
    </dependency>

    <!-- Hive dependency for creating tables -->
    <dependency>
      <groupId>org.apache.hive</groupId>
      <artifactId>hive-jdbc</artifactId>
      <version>3.1.3</version>
      <!-- We cannot switch to newer versions yet as they are not stable, e.g.,
        4.0.0-beta-1 gives a NoClassDefFoundError on some Thrift classes;
        or 4.0.0-alpha-2 fails to connect to the thrift server.
        Because of this issue we exclude `log4j:log4j` and pin a newer version.
        We also need to exclude `htrace-core` (see below). -->
      <exclusions>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-reload4j</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.apache.logging.log4j</groupId>
          <artifactId>log4j-slf4j-impl</artifactId>
        </exclusion>
        <exclusion>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </exclusion>
        <!-- The reason for this exclusion is that this is a very old release
           which depends on `com.fasterxml.jackson.core:jackson-databind:2.4.0`
           which has the CVE-2020-24750 vulnerability. Simple exclusion of this
           is not the "right" approach but is working for our use-case. A new
           release of `hive-jdbc` (which depends on `hive-*` libraries) can
           resolve many of these issues as 3.1.3 is too old. -->
        <exclusion>
          <groupId>org.apache.htrace</groupId>
          <artifactId>htrace-core</artifactId>
        </exclusion>
        <!-- Similar as above! -->
        <exclusion>
          <groupId>org.codehaus.jackson</groupId>
          <artifactId>jackson-mapper-asl</artifactId>
        </exclusion>
        <!-- Similar as above! -->
        <exclusion>
          <groupId>io.netty</groupId>
          <artifactId>netty</artifactId>
        </exclusion>
        <exclusion>
          <groupId>javax.servlet.jsp</groupId>
          <artifactId>javax.servlet.jsp-api</artifactId>
        </exclusion>
        <!-- This is needed because of javax to jakarta migration in EE 9. -->
        <exclusion>
          <groupId>org.glassfish.web</groupId>
          <artifactId>javax.servlet.jsp</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.eclipse.jetty</groupId>
          <artifactId>jetty-runner</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.apache.parquet</groupId>
          <artifactId>parquet-hadoop-bundle</artifactId>
        </exclusion>
        <!-- This exclusion is required as it fails to read artifact descriptor for
             org.glassfish:javax.el:jar:3.0.1-b06-SNAPSHOT when built project at root level. -->
        <exclusion>
          <groupId>org.glassfish</groupId>
          <artifactId>javax.el</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.squareup.okhttp3</groupId>
      <artifactId>mockwebserver</artifactId>
      <version>4.12.0</version>
      <scope>test</scope>
    </dependency>
    <!-- This will make sure that the Junit 4 test cases will also be run along with Junit 5 test
    cases-->
    <dependency>
      <groupId>org.junit.vintage</groupId>
      <artifactId>junit-vintage-engine</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>${project.artifactId}-bundled</finalName>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>${spring-boot.version}</version>
        <!-- The "fork" configuration parameter was removed in Spring Boot 3;
           we need another way to be able to debug from IDE. -->
        <executions>
          <execution>
            <!-- This creates the standalone fat-jar with "-exec" suffix.  -->
            <id>repackage</id>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>

      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <executions>
          <execution>
            <id>default-jar</id>
            <phase>package</phase>
            <goals>
              <goal>jar</goal>
            </goals>
            <configuration>
              <archive>
                <manifestEntries>
                  <!-- These options enable access to all methods in the mentioned packages at
                  compile and runtime. These are added as MANIFEST entries in the bundled jar. These
                  had to be enabled specifically for accessing the
                  `jdk.internal.misc.VM.maxDirectMemory()` API
                  TODO find an easy way to add these for IDE debugging too;
                   currently we need to comment out the corresponding part.
                  -->
                  <Add-Exports>java.base/jdk.internal.misc</Add-Exports>
                  <Add-Opens>java.base/jdk.internal.misc=ALL-UNNAMED</Add-Opens>
                </manifestEntries>
              </archive>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>
